# Usando a imagem base do ASP.NET para execução
FROM mcr.microsoft.com/dotnet/aspnet:8.0.11-bookworm-slim AS base
#
# Criar o diretório e usuário não-root
RUN mkdir -p /app && adduser --disabled-password --gecos "" userapp && chown -R userapp /app
#
# Criar diretório para armazenar o certificado SSL
RUN mkdir -p /https && chown -R userapp /https
#
# Definir variáveis de ambiente para SSL
ENV ASPNETCORE_URLS="https://+:443;http://+:80"
ENV ASPNETCORE_Kestrel__Certificates__Default__Path="/https/aspnetcore.pfx"
ENV ASPNETCORE_Kestrel__Certificates__Default__Password="SenhaForte123!"
#
# Expor as portas HTTP e HTTPS
EXPOSE 80 443
#
# Usando a imagem base do SDK do .NET para build
FROM mcr.microsoft.com/dotnet/sdk:8.0.404-bookworm-slim AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
#
# Copiar arquivos de projeto e restaurar dependências
COPY ["src/Api/Api.csproj", "./src/Api/"]
#
COPY ["src/UseCases/UseCases.csproj", "./src/UseCases/"]
#
COPY ["src/BuildingBlocks/Core.Domain/Core.Domain.csproj", "./src/Core.Domain/"]
COPY ["src/BuildingBlocks/Core.Infra.MessageBroker/Core.Infra.MessageBroker.csproj", "./src/Core.Infra.MessageBroker/"]
COPY ["src/BuildingBlocks/Core.Infra.S3/Core.Infra.S3.csproj", "./src/Core.Infra.S3/"]
COPY ["src/BuildingBlocks/Core.WebApi/Core.WebApi.csproj", "./src/Core.WebApi/"]
#
COPY ["src/Controllers/Controllers.csproj", "./src/Controllers/"]
#
COPY ["src/Domain/Domain.csproj", "./src/Domain/"]
#
COPY ["src/Gateways/Gateways.csproj", "./src/Gateways/"]
COPY ["src/Gateways.Cognito/Gateways.Cognito.csproj", "./src/Gateways.Cognito/"]
#
COPY ["src/Infra/Infra.csproj", "./src/Infra/"]
#
# Restaurar dependências
WORKDIR /src/Api
RUN ls -R /src/Api
RUN dotnet restore "Api.csproj"
#
# Instalar dotnet-ef localmente para o usuário não-root
RUN dotnet tool install --tool-path /tools dotnet-ef
#
# Garantir que dotnet-ef está no PATH
ENV PATH="$PATH:/tools"
#
# Copiar o restante do código
COPY . .
#
# Definir diretório de trabalho e compilar
WORKDIR /src/Api
RUN dotnet build "Api.csproj" -c $BUILD_CONFIGURATION -o /app/build
#
# Copiar as ferramentas e a publicação para a imagem final
COPY --from=build /tools /tools
COPY --from=publish /app/publish /app
#
# Definir o usuário não-root
USER userapp
#
# Garantir que dotnet-ef está no PATH para o usuário não-root
ENV PATH="$PATH:/tools"
