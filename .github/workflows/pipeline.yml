name: .NET Core Tests and Deployments

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop

jobs:
  unit_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Convert file encoding to UTF-8
      - name: Convert file encoding to UTF-8
        run: |
          iconv -f ISO-8859-1 -t UTF-8 ./src/Domain/Entities/Usuario.cs -o ./src/Domain/Entities/Usuario.cs
          iconv -f ISO-8859-1 -t UTF-8 ./src/Api/Controllers/UsuariosApiController.cs -o ./src/Api/Controllers/UsuariosApiController.cs
          iconv -f US-ASCII -t UTF-8 ./src/Api/Program.cs -o ./src/Api/Program.cs

      # Verify file encoding
      - name: Verify file encoding
        run: |
          find . -type f -name "*.cs" -exec file -i {} \; | grep -v 'charset=utf-8' && exit 1 || exit 0

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore src/Api/Api.csproj

      # Run unit tests with coverage and specify results directory
      - name: Run all tests with coverage
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1
          DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
          LANG: C.UTF-8
        run: |
          dotnet test Framepack-WebApi.sln \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory tests/TestResults \
          --logger:"trx;LogFileName=TestResults.trx" \
          --diag:log-detailed.txt

      # Display detailed logs if tests fail
      - name: Display test logs
        if: failure()
        run: cat log-detailed.txt

  code_analysis:
    runs-on: ubuntu-latest
    needs: unit_test
    steps:
      # 1. Checkout do código
      - uses: actions/checkout@v3

      # 2. Configuração do .NET SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 3. Cache do SonarCloud
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # 4. Cache do SonarCloud Scanner
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # 5. Instalação do SonarCloud Scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "${DOTNET_ROOT}/tools" >> $GITHUB_PATH

      # 6. Instalação do dotnet-coverage
      - name: Install dotnet-coverage
        run: |
          dotnet tool install --global dotnet-coverage

      # 7. Configuração e análise com o SonarScanner
      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN_GIT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Iniciar o scanner do SonarCloud
          dotnet-sonarscanner begin \
            /k:"SofArc6Soat_quickfood-backend-backoffice" \
            /o:"sofarc6soat" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.vscoveragexml.reportsPaths="tests/Framepack-WebApi.Tests/TestResults/**/coverage.cobertura.xml" \
            /d:sonar.inclusions="**/*.cs" \
            /d:sonar.coverage.exclusions="**/Program.cs,**/Startup.cs" \
            /d:sonar.verbose=true

          # Build da solução
          dotnet build ./Framepack-WebApi.sln --configuration Release

          # Execução dos testes com coleta de cobertura
          dotnet test ./Framepack-WebApi.sln --configuration Release --no-build --collect:"XPlat Code Coverage"

          # Finalizando a análise no SonarCloud
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    runs-on: ubuntu-latest
    needs: code_analysis
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Build application
      - name: Build application
        run: dotnet build src/Api/Api.csproj --configuration Release

      # Deploy application
      - name: Deploy application
        run: echo "Add your deploy commands here"

  smoketest:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Run smoke tests
      - name: Run smoke tests
        run: dotnet test tests/SmokeTests/SmokeTests.csproj

  publish_docker_image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: smoketest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: docker buildx build --push -t sofarc6soat/framepack-api:latest -f ./src/Api/Dockerfile.publish .
