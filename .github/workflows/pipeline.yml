name: .NET Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do repositório 2
      - name: Checkout code
        uses: actions/checkout@v3

      # Instalação do .NET
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Configuração de locales e encoding UTF-8
      - name: Configure locale for UTF-8
        run: |
          sudo apt-get update && sudo apt-get install -y locales
          sudo locale-gen en_US.UTF-8
          export LANG=en_US.UTF-8
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
        env:
          LANG: en_US.UTF-8
          DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: false

      # Restauração de dependências
      - name: Restore dependencies
        run: dotnet restore

      # Construção do projeto
      - name: Build project
        run: dotnet build --no-restore --configuration Release

      # Execução dos testes
      - name: Run tests
        run: dotnet test --no-build --configuration Release --logger "trx;LogFileName=TestResults.trx" --results-directory tests/TestResults
        env:
          LANG: en_US.UTF-8
          DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: false

      # Publicação de resultados de cobertura de testes
      - name: Publish code coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: tests/TestResults/coverage.cobertura.xml

      # Publicação de resultados de teste
      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: tests/TestResults/TestResults.trx

  code_analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "${DOTNET_ROOT}/tools" >> $GITHUB_PATH

      - name: Install dotnet-coverage
        run: |
          dotnet tool install --global dotnet-coverage

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN_GIT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"SofArc6Soat_quickfood-backend-backoffice" \
            /o:"sofarc6soat" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.vscoveragexml.reportsPaths="tests/Framepack-WebApi.Tests/TestResults/**/coverage.cobertura.xml" \
            /d:sonar.inclusions="**/*.cs" \
            /d:sonar.coverage.exclusions="**/Program.cs,**/Startup.cs" \
            /d:sonar.verbose=true

          dotnet build ./Framepack-WebApi.sln --configuration Release

          dotnet test ./Framepack-WebApi.sln --configuration Release --no-build --collect:"XPlat Code Coverage"

          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  deploy:
    runs-on: ubuntu-latest
    needs: code_analysis
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build application
        run: dotnet build src/Api/Api.csproj --configuration Release

      - name: Deploy application
        run: echo "Add your deploy commands here"

  smoketest:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run smoke tests
        run: dotnet test tests/SmokeTests/SmokeTests.csproj

  publish_docker_image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: smoketest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: docker buildx build --push -t sofarc6soat/framepack-api:latest -f ./src/Api/Dockerfile.publish .
